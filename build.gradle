// -------------------------- START Versioning -------------------------------//
ext.versionFile = file('version.properties')

// this is a configuration task since missing '<<' left shift operator
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion(){
    //logger.quiet 'Reading the version file.'

    if(!versionFile.exists()){
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }
    Properties versionProps = new Properties()

    versionFile.withInputStream {
        stream -> versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(),
    versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

task printVersion {
    group = 'versioning'
    description = 'Prints project version'

    doLast{
        logger.quiet "Version: $version"
    }
}
// -------------------------- END Versioning ---------------------------------//

// -------------------------- START Projects ---------------------------------//
allprojects {
    group = 'com.example.cm'
    version = readVersion()
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'

    dependencies {
        compile "javax.inject:javax.inject:$javaxInjectVersion"

        compile "org.apache.commons:commons-lang3:$apacheCommonsLangVersion"

        // Message Conversion
        compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonJsr310Version"

        //Spring
		compile ("org.springframework:spring-context:$springVersion"){
            exclude group: 'commons-logging', module: 'commons-logging'
        }
		compile "org.springframework:spring-aspects:$springVersion"

        // Hibernate
        compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
        compile "javax.validation:validation-api:$javaxValidationApi"

        // Spring Security
        compile "org.springframework.security:spring-security-core:$springSecurityVersion"
        compile "org.springframework.security:spring-security-config:$springSecurityVersion"

        //Testing
		testCompile "junit:junit:$junitVersion"
        testCompile "junit:junit-dep:$junitVersion"
		testCompile "org.springframework:spring-test:$springVersion"
        testCompile "org.hamcrest:hamcrest-junit:$hamcrestJunitVersion"
    }
    sourceCompatibility = 1.8

    idea {    
        module {
            downloadSources = true
            downloadJavadoc = false
        }
    }

}
// -------------------------- END Projects -----------------------------------//

// -------------------------- START Gradle -----------------------------------//
task wrapper(type: Wrapper){
    gradleVersion = '2.6'
}
// -------------------------- END Gradle -------------------------------------//

// -------------------------- START IDEA -------------------------------------//
idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'

        ipr.withXml { provider ->
            def node = provider.asNode()
            def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
            gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
        }
    }
}
// -------------------------- END IDEA ---------------------------------------//
