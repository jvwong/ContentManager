apply plugin: 'war'
apply plugin: 'jetty'
// -------------------------- START Web --------------------------------------//

// -------------------------- END Web ----------------------------------------//

// -------------------------- START Configurations ---------------------------//
configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}
// -------------------------- END Configurations -----------------------------//

// -------------------------- START Tasks ------------------------------------//
task deployToLocalTomcat << {

    // retrieve cargo dependencies as file tree
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    // User Cargo Ant task to download Tomcat 7, deploy a WAR file,
    // and run it in container
    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            property(name: 'cargo.servlet.port', value: '8080')
            property(name: 'cargo.logging', value: 'high')
            property(name: 'cargo.tomcat.context.reloadable', value: 'true')
            deployable(type: 'war', file: "${buildDir}/libs/${project.name}-${project.version}.war")
        }
        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-8/v8.0.9/bin/apache-tomcat-8.0.9.zip')
    }
}
ext.cargoGroup = 'org.codehaus.cargo'
ext.cargoVersion = '1.3.1'
// -------------------------- END Tasks --------------------------------------//

// -------------------------- START Gradle -----------------------------------//
repositories {
    mavenCentral()
}

dependencies {

    // Spring
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"

    // Spring Security
    compile "org.springframework.security:spring-security-web:$springSecurityVersion"

    // Thymeleaf
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:$thymeleafSpringExtrasVersion"
	compile "org.thymeleaf:thymeleaf-spring4:$thymeleafSpring4Version"

	// Hibernate
	compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
	compile "javax.validation:validation-api:$javaxValidationApi"

    testCompile "com.google.code.gson:gson:$gsonVersion"

	//Logging
	compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
    runtime "org.apache.logging.log4j:log4j-core:$log4jVersion"
    runtime "org.apache.logging.log4j:log4j-jcl:$log4jVersion"
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    // Mockito
    testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"

    // jayway - to test JSON paths
    testCompile "com.jayway.jsonpath:json-path-assert:$jsonPathAssertVersion"

    providedCompile "javax.servlet:javax.servlet-api:$javaxServletApiVersion"

	// Cargo
	// Declare dependency info using map containing group, name, and version
    cargo group: cargoGroup, name: 'cargo-core-uberjar', version: cargoVersion
	// (Shortcut) dependency declaration as string using above
    cargo "$cargoGroup:cargo-ant:$cargoVersion"

	compile project(':cm-repository')
    compile project(':cm-jcrrepository')
	compile project(':cm-model')
}
// -------------------------- END Gradle -------------------------------------//
